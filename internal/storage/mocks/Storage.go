// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "testTaskLamoda/internal/storage/models"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CreateReserve provides a mock function with given fields: ctx, skus
func (_m *Storage) CreateReserve(ctx context.Context, skus []string) (map[string]models.SkuStoreStatus, error) {
	ret := _m.Called(ctx, skus)

	if len(ret) == 0 {
		panic("no return value specified for CreateReserve")
	}

	var r0 map[string]models.SkuStoreStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) (map[string]models.SkuStoreStatus, error)); ok {
		return rf(ctx, skus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) map[string]models.SkuStoreStatus); ok {
		r0 = rf(ctx, skus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]models.SkuStoreStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, skus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReserve provides a mock function with given fields: ctx, skus
func (_m *Storage) DeleteReserve(ctx context.Context, skus []string) (map[string]models.SkuStoreStatus, error) {
	ret := _m.Called(ctx, skus)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReserve")
	}

	var r0 map[string]models.SkuStoreStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) (map[string]models.SkuStoreStatus, error)); ok {
		return rf(ctx, skus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) map[string]models.SkuStoreStatus); ok {
		r0 = rf(ctx, skus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]models.SkuStoreStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, skus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreBalance provides a mock function with given fields: ctx, storeId
func (_m *Storage) StoreBalance(ctx context.Context, storeId uint) ([]models.SkuStore, error) {
	ret := _m.Called(ctx, storeId)

	if len(ret) == 0 {
		panic("no return value specified for StoreBalance")
	}

	var r0 []models.SkuStore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]models.SkuStore, error)); ok {
		return rf(ctx, storeId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []models.SkuStore); ok {
		r0 = rf(ctx, storeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SkuStore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, storeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
